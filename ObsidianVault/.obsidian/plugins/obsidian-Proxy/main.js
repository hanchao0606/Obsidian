/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianProxyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  ProxyType: 0 /* none */,
  ProxyAddress: "",
  ProxyPort: 0,
  ProxyUsername: "",
  ProxyPassword: "",
  EnableProxy: false
};
var ObsidianProxySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    console.log("Setting Tab Loaded");
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Obsidian Proxy Setup" });
    new import_obsidian.Setting(containerEl).setName("Proxy Type").setDesc("Select protocol of proxy server").addDropdown((dropDown) => {
      dropDown.addOption("Type", "None");
      dropDown.addOption("None", "None");
      dropDown.addOption("HTTP", "HTTP");
      dropDown.addOption("Socks5", "Socks5");
      dropDown.onChange(async (value) => {
        switch (value) {
          case "HTTP":
            this.plugin.settings.ProxyType = 1 /* http */;
            break;
          case "Socks5":
            this.plugin.settings.ProxyType = 2 /* socks5 */;
            break;
          case "None":
            this.plugin.settings.ProxyType = 0 /* none */;
            break;
          default:
            this.plugin.settings.ProxyType = 0 /* none */;
            break;
        }
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Proxy Address").setDesc("Address of proxy server").addText((text) => text.setPlaceholder("Proxy Address").setValue(this.plugin.settings.ProxyAddress).onChange(async (value) => {
      this.plugin.settings.ProxyAddress = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Proxy Port").setDesc("Port of proxy server").addText((text) => text.setPlaceholder("Proxy Port").setValue(String(this.plugin.settings.ProxyPort)).onChange(async (value) => {
      if (isNaN(Number(value))) {
        console.log("Invalid Value");
      } else {
        this.plugin.settings.ProxyPort = Number(value);
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Proxy Username").setDesc("Username of proxy server account").addText((text) => text.setPlaceholder("Proxy Username").setValue(this.plugin.settings.ProxyUsername).onChange(async (value) => {
      this.plugin.settings.ProxyUsername = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Proxy Password").setDesc("Password of proxy server account").addText((text) => text.setPlaceholder("Proxy Password").setValue(this.plugin.settings.ProxyPassword).onChange(async (value) => {
      this.plugin.settings.ProxyPassword = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Enable").addDropdown((dropDown) => {
      dropDown.addOption("Enable", "Enable");
      dropDown.addOption("Disable", "Disable");
      dropDown.onChange(async (value) => {
        switch (value) {
          case "Enable":
            this.plugin.settings.EnableProxy = true;
            break;
          case "Disable":
            this.plugin.settings.EnableProxy = false;
            break;
          default:
            break;
        }
        await this.plugin.saveSettings();
      });
    });
  }
};
var ObsidianProxyPlugin = class extends import_obsidian.Plugin {
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new ObsidianProxySettingTab(this.app, this));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBFZGl0b3IsIE1hcmtkb3duVmlldywgTW9kYWwsIE5vdGljZSwgUGx1Z2luLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgdGV4dCB9IGZyb20gJ3N0cmVhbS9jb25zdW1lcnMnO1xuXG5lbnVtIFByb3h5VHlwZV9lIHtcbiAgICBub25lID0gMCxcbiAgICBodHRwID0gMSxcbiAgICBzb2NrczUgPSAyXG59XG5cbmludGVyZmFjZSBPYnNpZGlhblByb3h5U2V0dGluZ3Mge1xuICAgIFByb3h5VHlwZTogUHJveHlUeXBlX2U7XG4gICAgUHJveHlBZGRyZXNzOiBzdHJpbmc7XG4gICAgUHJveHlQb3J0OiBudW1iZXI7XG4gICAgUHJveHlVc2VybmFtZTogc3RyaW5nO1xuICAgIFByb3h5UGFzc3dvcmQ6IHN0cmluZztcbiAgICBFbmFibGVQcm94eTogYm9vbGVhbjtcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogT2JzaWRpYW5Qcm94eVNldHRpbmdzID0ge1xuICAgIFByb3h5VHlwZTogUHJveHlUeXBlX2Uubm9uZSxcbiAgICBQcm94eUFkZHJlc3M6ICcnLFxuICAgIFByb3h5UG9ydDogMCxcbiAgICBQcm94eVVzZXJuYW1lOiAnJyxcbiAgICBQcm94eVBhc3N3b3JkOiAnJyxcbiAgICBFbmFibGVQcm94eTogZmFsc2Vcbn1cblxuY2xhc3MgT2JzaWRpYW5Qcm94eVNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBPYnNpZGlhblByb3h5UGx1Z2luKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTZXR0aW5nIFRhYiBMb2FkZWQnKVxuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbilcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW5cbiAgICB9XG4gICAgcGx1Z2luOiBPYnNpZGlhblByb3h5UGx1Z2luXG4gICAgZGlzcGxheSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXNcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdPYnNpZGlhbiBQcm94eSBTZXR1cCd9KTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZSgnUHJveHkgVHlwZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnU2VsZWN0IHByb3RvY29sIG9mIHByb3h5IHNlcnZlcicpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcERvd24gPT4ge1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbignVHlwZScsICdOb25lJyk7XG4gICAgICAgICAgICAgICAgZHJvcERvd24uYWRkT3B0aW9uKCdOb25lJywgJ05vbmUnKTtcbiAgICAgICAgICAgICAgICBkcm9wRG93bi5hZGRPcHRpb24oJ0hUVFAnLCAnSFRUUCcpO1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbignU29ja3M1JywgJ1NvY2tzNScpO1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2godmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0hUVFAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5VHlwZSA9IFByb3h5VHlwZV9lLmh0dHA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTb2NrczUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5VHlwZSA9IFByb3h5VHlwZV9lLnNvY2tzNTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ05vbmUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5VHlwZSA9IFByb3h5VHlwZV9lLm5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5VHlwZSA9IFByb3h5VHlwZV9lLm5vbmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKClcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ1Byb3h5IEFkZHJlc3MnKVxuICAgICAgICAgICAgLnNldERlc2MoJ0FkZHJlc3Mgb2YgcHJveHkgc2VydmVyJylcbiAgICAgICAgICAgIC5hZGRUZXh0KHRleHQgPT4gdGV4dFxuICAgICAgICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignUHJveHkgQWRkcmVzcycpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5QWRkcmVzcylcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmModmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuUHJveHlBZGRyZXNzID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdQcm94eSBQb3J0JylcbiAgICAgICAgICAgIC5zZXREZXNjKCdQb3J0IG9mIHByb3h5IHNlcnZlcicpXG4gICAgICAgICAgICAuYWRkVGV4dCh0ZXh0ID0+IHRleHRcbiAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ1Byb3h5IFBvcnQnKVxuICAgICAgICAgICAgICAgIC5zZXRWYWx1ZShTdHJpbmcodGhpcy5wbHVnaW4uc2V0dGluZ3MuUHJveHlQb3J0KSlcbiAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmModmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNOYU4oTnVtYmVyKHZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdJbnZhbGlkIFZhbHVlJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5Qcm94eVBvcnQgPSBOdW1iZXIodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdQcm94eSBVc2VybmFtZScpXG4gICAgICAgICAgICAuc2V0RGVzYygnVXNlcm5hbWUgb2YgcHJveHkgc2VydmVyIGFjY291bnQnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdQcm94eSBVc2VybmFtZScpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5VXNlcm5hbWUpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jKHZhbHVlKT0+e1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5Qcm94eVVzZXJuYW1lID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKCdQcm94eSBQYXNzd29yZCcpXG4gICAgICAgICAgICAuc2V0RGVzYygnUGFzc3dvcmQgb2YgcHJveHkgc2VydmVyIGFjY291bnQnKVxuICAgICAgICAgICAgLmFkZFRleHQodGV4dCA9PiB0ZXh0XG4gICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdQcm94eSBQYXNzd29yZCcpXG4gICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5UGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLlByb3h5UGFzc3dvcmQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0VuYWJsZScpXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oZHJvcERvd24gPT4ge1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbignRW5hYmxlJywgJ0VuYWJsZScpO1xuICAgICAgICAgICAgICAgIGRyb3BEb3duLmFkZE9wdGlvbignRGlzYWJsZScsICdEaXNhYmxlJyk7XG4gICAgICAgICAgICAgICAgZHJvcERvd24ub25DaGFuZ2UoYXN5bmModmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdFbmFibGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLkVuYWJsZVByb3h5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ0Rpc2FibGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLkVuYWJsZVByb3h5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JzaWRpYW5Qcm94eVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgc2V0dGluZ3M6IE9ic2lkaWFuUHJveHlTZXR0aW5nc1xuICAgIGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSlcbiAgICB9XG4gICAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpXG4gICAgfVxuICAgIG9udW5sb2FkKCk6IHZvaWQge31cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKClcbiAgICAgICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBPYnNpZGlhblByb3h5U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQTRGO0FBa0I1RixJQUFNLG1CQUEwQztBQUFBLEVBQzVDLFdBQVc7QUFBQSxFQUNYLGNBQWM7QUFBQSxFQUNkLFdBQVc7QUFBQSxFQUNYLGVBQWU7QUFBQSxFQUNmLGVBQWU7QUFBQSxFQUNmLGFBQWE7QUFDakI7QUFFQSxJQUFNLDBCQUFOLGNBQXNDLGlDQUFpQjtBQUFBLEVBQ25ELFlBQVksS0FBVSxRQUE2QjtBQUMvQyxZQUFRLElBQUksb0JBQW9CO0FBQ2hDLFVBQU0sS0FBSyxNQUFNO0FBQ2pCLFNBQUssU0FBUztBQUFBLEVBQ2xCO0FBQUEsRUFFQSxVQUFnQjtBQUNaLFVBQU0sRUFBQyxnQkFBZTtBQUN0QixnQkFBWSxNQUFNO0FBQ2xCLGdCQUFZLFNBQVMsTUFBTSxFQUFDLE1BQU0sdUJBQXNCLENBQUM7QUFDekQsUUFBSSx3QkFBUSxXQUFXLEVBQ2xCLFFBQVEsWUFBWSxFQUNwQixRQUFRLGlDQUFpQyxFQUN6QyxZQUFZLGNBQVk7QUFDckIsZUFBUyxVQUFVLFFBQVEsTUFBTTtBQUNqQyxlQUFTLFVBQVUsUUFBUSxNQUFNO0FBQ2pDLGVBQVMsVUFBVSxRQUFRLE1BQU07QUFDakMsZUFBUyxVQUFVLFVBQVUsUUFBUTtBQUNyQyxlQUFTLFNBQVMsT0FBTyxVQUFVO0FBQy9CLGdCQUFPO0FBQUEsZUFDRTtBQUNELGlCQUFLLE9BQU8sU0FBUyxZ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
